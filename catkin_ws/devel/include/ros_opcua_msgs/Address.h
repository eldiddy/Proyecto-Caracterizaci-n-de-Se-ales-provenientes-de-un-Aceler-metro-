// Generated by gencpp from file ros_opcua_msgs/Address.msg
// DO NOT EDIT!


#ifndef ROS_OPCUA_MSGS_MESSAGE_ADDRESS_H
#define ROS_OPCUA_MSGS_MESSAGE_ADDRESS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_opcua_msgs
{
template <class ContainerAllocator>
struct Address_
{
  typedef Address_<ContainerAllocator> Type;

  Address_()
    : nodeId()
    , qualifiedName()  {
    }
  Address_(const ContainerAllocator& _alloc)
    : nodeId(_alloc)
    , qualifiedName(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _nodeId_type;
  _nodeId_type nodeId;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _qualifiedName_type;
  _qualifiedName_type qualifiedName;





  typedef boost::shared_ptr< ::ros_opcua_msgs::Address_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_opcua_msgs::Address_<ContainerAllocator> const> ConstPtr;

}; // struct Address_

typedef ::ros_opcua_msgs::Address_<std::allocator<void> > Address;

typedef boost::shared_ptr< ::ros_opcua_msgs::Address > AddressPtr;
typedef boost::shared_ptr< ::ros_opcua_msgs::Address const> AddressConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_opcua_msgs::Address_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_opcua_msgs::Address_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_opcua_msgs::Address_<ContainerAllocator1> & lhs, const ::ros_opcua_msgs::Address_<ContainerAllocator2> & rhs)
{
  return lhs.nodeId == rhs.nodeId &&
    lhs.qualifiedName == rhs.qualifiedName;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_opcua_msgs::Address_<ContainerAllocator1> & lhs, const ::ros_opcua_msgs::Address_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_opcua_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_opcua_msgs::Address_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_opcua_msgs::Address_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_opcua_msgs::Address_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_opcua_msgs::Address_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_opcua_msgs::Address_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_opcua_msgs::Address_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_opcua_msgs::Address_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b42b1dbd3ac4f374e9502c4ddbd8514";
  }

  static const char* value(const ::ros_opcua_msgs::Address_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b42b1dbd3ac4f37ULL;
  static const uint64_t static_value2 = 0x4e9502c4ddbd8514ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_opcua_msgs::Address_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_opcua_msgs/Address";
  }

  static const char* value(const ::ros_opcua_msgs::Address_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_opcua_msgs::Address_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string nodeId\n"
"string qualifiedName\n"
;
  }

  static const char* value(const ::ros_opcua_msgs::Address_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_opcua_msgs::Address_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nodeId);
      stream.next(m.qualifiedName);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Address_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_opcua_msgs::Address_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_opcua_msgs::Address_<ContainerAllocator>& v)
  {
    s << indent << "nodeId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.nodeId);
    s << indent << "qualifiedName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.qualifiedName);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_OPCUA_MSGS_MESSAGE_ADDRESS_H
