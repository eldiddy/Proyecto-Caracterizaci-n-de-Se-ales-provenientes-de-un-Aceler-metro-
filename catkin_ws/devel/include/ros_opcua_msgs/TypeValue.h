// Generated by gencpp from file ros_opcua_msgs/TypeValue.msg
// DO NOT EDIT!


#ifndef ROS_OPCUA_MSGS_MESSAGE_TYPEVALUE_H
#define ROS_OPCUA_MSGS_MESSAGE_TYPEVALUE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_opcua_msgs
{
template <class ContainerAllocator>
struct TypeValue_
{
  typedef TypeValue_<ContainerAllocator> Type;

  TypeValue_()
    : type()
    , bool_d(false)
    , int8_d(0)
    , uint8_d(0)
    , int16_d(0)
    , uint16_d(0)
    , int32_d(0)
    , uint32_d(0)
    , int64_d(0)
    , uint64_d(0)
    , float_d(0.0)
    , double_d(0.0)
    , string_d()  {
    }
  TypeValue_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , bool_d(false)
    , int8_d(0)
    , uint8_d(0)
    , int16_d(0)
    , uint16_d(0)
    , int32_d(0)
    , uint32_d(0)
    , int64_d(0)
    , uint64_d(0)
    , float_d(0.0)
    , double_d(0.0)
    , string_d(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef uint8_t _bool_d_type;
  _bool_d_type bool_d;

   typedef int8_t _int8_d_type;
  _int8_d_type int8_d;

   typedef uint8_t _uint8_d_type;
  _uint8_d_type uint8_d;

   typedef int16_t _int16_d_type;
  _int16_d_type int16_d;

   typedef uint16_t _uint16_d_type;
  _uint16_d_type uint16_d;

   typedef int32_t _int32_d_type;
  _int32_d_type int32_d;

   typedef uint32_t _uint32_d_type;
  _uint32_d_type uint32_d;

   typedef int64_t _int64_d_type;
  _int64_d_type int64_d;

   typedef uint64_t _uint64_d_type;
  _uint64_d_type uint64_d;

   typedef float _float_d_type;
  _float_d_type float_d;

   typedef double _double_d_type;
  _double_d_type double_d;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _string_d_type;
  _string_d_type string_d;





  typedef boost::shared_ptr< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> const> ConstPtr;

}; // struct TypeValue_

typedef ::ros_opcua_msgs::TypeValue_<std::allocator<void> > TypeValue;

typedef boost::shared_ptr< ::ros_opcua_msgs::TypeValue > TypeValuePtr;
typedef boost::shared_ptr< ::ros_opcua_msgs::TypeValue const> TypeValueConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_opcua_msgs::TypeValue_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_opcua_msgs::TypeValue_<ContainerAllocator1> & lhs, const ::ros_opcua_msgs::TypeValue_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.bool_d == rhs.bool_d &&
    lhs.int8_d == rhs.int8_d &&
    lhs.uint8_d == rhs.uint8_d &&
    lhs.int16_d == rhs.int16_d &&
    lhs.uint16_d == rhs.uint16_d &&
    lhs.int32_d == rhs.int32_d &&
    lhs.uint32_d == rhs.uint32_d &&
    lhs.int64_d == rhs.int64_d &&
    lhs.uint64_d == rhs.uint64_d &&
    lhs.float_d == rhs.float_d &&
    lhs.double_d == rhs.double_d &&
    lhs.string_d == rhs.string_d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_opcua_msgs::TypeValue_<ContainerAllocator1> & lhs, const ::ros_opcua_msgs::TypeValue_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_opcua_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af7ad16307b5795f5d52adc813870ca9";
  }

  static const char* value(const ::ros_opcua_msgs::TypeValue_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf7ad16307b5795fULL;
  static const uint64_t static_value2 = 0x5d52adc813870ca9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_opcua_msgs/TypeValue";
  }

  static const char* value(const ::ros_opcua_msgs::TypeValue_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents OPC-UA type-value pair\n"
"string type\n"
"bool bool_d\n"
"int8 int8_d\n"
"uint8 uint8_d\n"
"int16 int16_d\n"
"uint16 uint16_d\n"
"int32 int32_d\n"
"uint32 uint32_d\n"
"int64 int64_d\n"
"uint64 uint64_d\n"
"float32 float_d\n"
"float64 double_d\n"
"string string_d\n"
;
  }

  static const char* value(const ::ros_opcua_msgs::TypeValue_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.bool_d);
      stream.next(m.int8_d);
      stream.next(m.uint8_d);
      stream.next(m.int16_d);
      stream.next(m.uint16_d);
      stream.next(m.int32_d);
      stream.next(m.uint32_d);
      stream.next(m.int64_d);
      stream.next(m.uint64_d);
      stream.next(m.float_d);
      stream.next(m.double_d);
      stream.next(m.string_d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TypeValue_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_opcua_msgs::TypeValue_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_opcua_msgs::TypeValue_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "bool_d: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bool_d);
    s << indent << "int8_d: ";
    Printer<int8_t>::stream(s, indent + "  ", v.int8_d);
    s << indent << "uint8_d: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.uint8_d);
    s << indent << "int16_d: ";
    Printer<int16_t>::stream(s, indent + "  ", v.int16_d);
    s << indent << "uint16_d: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.uint16_d);
    s << indent << "int32_d: ";
    Printer<int32_t>::stream(s, indent + "  ", v.int32_d);
    s << indent << "uint32_d: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.uint32_d);
    s << indent << "int64_d: ";
    Printer<int64_t>::stream(s, indent + "  ", v.int64_d);
    s << indent << "uint64_d: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.uint64_d);
    s << indent << "float_d: ";
    Printer<float>::stream(s, indent + "  ", v.float_d);
    s << indent << "double_d: ";
    Printer<double>::stream(s, indent + "  ", v.double_d);
    s << indent << "string_d: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.string_d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_OPCUA_MSGS_MESSAGE_TYPEVALUE_H
