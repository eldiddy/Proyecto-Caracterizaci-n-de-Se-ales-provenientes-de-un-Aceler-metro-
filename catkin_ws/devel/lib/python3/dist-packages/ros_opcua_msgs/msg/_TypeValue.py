# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_opcua_msgs/TypeValue.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TypeValue(genpy.Message):
  _md5sum = "af7ad16307b5795f5d52adc813870ca9"
  _type = "ros_opcua_msgs/TypeValue"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This represents OPC-UA type-value pair
string type
bool bool_d
int8 int8_d
uint8 uint8_d
int16 int16_d
uint16 uint16_d
int32 int32_d
uint32 uint32_d
int64 int64_d
uint64 uint64_d
float32 float_d
float64 double_d
string string_d
"""
  __slots__ = ['type','bool_d','int8_d','uint8_d','int16_d','uint16_d','int32_d','uint32_d','int64_d','uint64_d','float_d','double_d','string_d']
  _slot_types = ['string','bool','int8','uint8','int16','uint16','int32','uint32','int64','uint64','float32','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,bool_d,int8_d,uint8_d,int16_d,uint16_d,int32_d,uint32_d,int64_d,uint64_d,float_d,double_d,string_d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TypeValue, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.bool_d is None:
        self.bool_d = False
      if self.int8_d is None:
        self.int8_d = 0
      if self.uint8_d is None:
        self.uint8_d = 0
      if self.int16_d is None:
        self.int16_d = 0
      if self.uint16_d is None:
        self.uint16_d = 0
      if self.int32_d is None:
        self.int32_d = 0
      if self.uint32_d is None:
        self.uint32_d = 0
      if self.int64_d is None:
        self.int64_d = 0
      if self.uint64_d is None:
        self.uint64_d = 0
      if self.float_d is None:
        self.float_d = 0.
      if self.double_d is None:
        self.double_d = 0.
      if self.string_d is None:
        self.string_d = ''
    else:
      self.type = ''
      self.bool_d = False
      self.int8_d = 0
      self.uint8_d = 0
      self.int16_d = 0
      self.uint16_d = 0
      self.int32_d = 0
      self.uint32_d = 0
      self.int64_d = 0
      self.uint64_d = 0
      self.float_d = 0.
      self.double_d = 0.
      self.string_d = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BbBhHiIqQfd().pack(_x.bool_d, _x.int8_d, _x.uint8_d, _x.int16_d, _x.uint16_d, _x.int32_d, _x.uint32_d, _x.int64_d, _x.uint64_d, _x.float_d, _x.double_d))
      _x = self.string_d
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.bool_d, _x.int8_d, _x.uint8_d, _x.int16_d, _x.uint16_d, _x.int32_d, _x.uint32_d, _x.int64_d, _x.uint64_d, _x.float_d, _x.double_d,) = _get_struct_BbBhHiIqQfd().unpack(str[start:end])
      self.bool_d = bool(self.bool_d)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.string_d = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.string_d = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BbBhHiIqQfd().pack(_x.bool_d, _x.int8_d, _x.uint8_d, _x.int16_d, _x.uint16_d, _x.int32_d, _x.uint32_d, _x.int64_d, _x.uint64_d, _x.float_d, _x.double_d))
      _x = self.string_d
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.bool_d, _x.int8_d, _x.uint8_d, _x.int16_d, _x.uint16_d, _x.int32_d, _x.uint32_d, _x.int64_d, _x.uint64_d, _x.float_d, _x.double_d,) = _get_struct_BbBhHiIqQfd().unpack(str[start:end])
      self.bool_d = bool(self.bool_d)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.string_d = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.string_d = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BbBhHiIqQfd = None
def _get_struct_BbBhHiIqQfd():
    global _struct_BbBhHiIqQfd
    if _struct_BbBhHiIqQfd is None:
        _struct_BbBhHiIqQfd = struct.Struct("<BbBhHiIqQfd")
    return _struct_BbBhHiIqQfd
