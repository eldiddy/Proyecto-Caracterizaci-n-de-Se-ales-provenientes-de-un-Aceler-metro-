# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_opcua_srvs/WriteRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ros_opcua_msgs.msg

class WriteRequest(genpy.Message):
  _md5sum = "72d070c751907fd5ca2b477a8e081323"
  _type = "ros_opcua_srvs/WriteRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """ros_opcua_msgs/Address node
ros_opcua_msgs/TypeValue data

================================================================================
MSG: ros_opcua_msgs/Address
string nodeId
string qualifiedName
================================================================================
MSG: ros_opcua_msgs/TypeValue
# This represents OPC-UA type-value pair
string type
bool bool_d
int8 int8_d
uint8 uint8_d
int16 int16_d
uint16 uint16_d
int32 int32_d
uint32 uint32_d
int64 int64_d
uint64 uint64_d
float32 float_d
float64 double_d
string string_d
"""
  __slots__ = ['node','data']
  _slot_types = ['ros_opcua_msgs/Address','ros_opcua_msgs/TypeValue']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       node,data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WriteRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.node is None:
        self.node = ros_opcua_msgs.msg.Address()
      if self.data is None:
        self.data = ros_opcua_msgs.msg.TypeValue()
    else:
      self.node = ros_opcua_msgs.msg.Address()
      self.data = ros_opcua_msgs.msg.TypeValue()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.node.nodeId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.node.qualifiedName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.data.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BbBhHiIqQfd().pack(_x.data.bool_d, _x.data.int8_d, _x.data.uint8_d, _x.data.int16_d, _x.data.uint16_d, _x.data.int32_d, _x.data.uint32_d, _x.data.int64_d, _x.data.uint64_d, _x.data.float_d, _x.data.double_d))
      _x = self.data.string_d
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.node is None:
        self.node = ros_opcua_msgs.msg.Address()
      if self.data is None:
        self.data = ros_opcua_msgs.msg.TypeValue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node.nodeId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node.nodeId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node.qualifiedName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node.qualifiedName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data.type = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.data.bool_d, _x.data.int8_d, _x.data.uint8_d, _x.data.int16_d, _x.data.uint16_d, _x.data.int32_d, _x.data.uint32_d, _x.data.int64_d, _x.data.uint64_d, _x.data.float_d, _x.data.double_d,) = _get_struct_BbBhHiIqQfd().unpack(str[start:end])
      self.data.bool_d = bool(self.data.bool_d)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.string_d = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data.string_d = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.node.nodeId
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.node.qualifiedName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.data.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BbBhHiIqQfd().pack(_x.data.bool_d, _x.data.int8_d, _x.data.uint8_d, _x.data.int16_d, _x.data.uint16_d, _x.data.int32_d, _x.data.uint32_d, _x.data.int64_d, _x.data.uint64_d, _x.data.float_d, _x.data.double_d))
      _x = self.data.string_d
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.node is None:
        self.node = ros_opcua_msgs.msg.Address()
      if self.data is None:
        self.data = ros_opcua_msgs.msg.TypeValue()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node.nodeId = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node.nodeId = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node.qualifiedName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node.qualifiedName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data.type = str[start:end]
      _x = self
      start = end
      end += 43
      (_x.data.bool_d, _x.data.int8_d, _x.data.uint8_d, _x.data.int16_d, _x.data.uint16_d, _x.data.int32_d, _x.data.uint32_d, _x.data.int64_d, _x.data.uint64_d, _x.data.float_d, _x.data.double_d,) = _get_struct_BbBhHiIqQfd().unpack(str[start:end])
      self.data.bool_d = bool(self.data.bool_d)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.string_d = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data.string_d = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BbBhHiIqQfd = None
def _get_struct_BbBhHiIqQfd():
    global _struct_BbBhHiIqQfd
    if _struct_BbBhHiIqQfd is None:
        _struct_BbBhHiIqQfd = struct.Struct("<BbBhHiIqQfd")
    return _struct_BbBhHiIqQfd
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_opcua_srvs/WriteResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WriteResponse(genpy.Message):
  _md5sum = "6fe914479ce03184a758c3f6990c928f"
  _type = "ros_opcua_srvs/WriteResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
string error_message
"""
  __slots__ = ['success','error_message']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,error_message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WriteResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.error_message is None:
        self.error_message = ''
    else:
      self.success = False
      self.error_message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.error_message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.error_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.error_message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class Write(object):
  _type          = 'ros_opcua_srvs/Write'
  _md5sum = '6b8afc0b78657683449df0e603595707'
  _request_class  = WriteRequest
  _response_class = WriteResponse
